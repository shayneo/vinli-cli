#!/usr/bin/env node
'use strict';

const assertAppSecret = require('../lib/app').assertAppSecret;
const dateUtils = require('../lib/dates');
const B = require('bluebird');
const program = require('commander');
const yarp = require('yarp');
const _ = require('lodash');
const Output = require('../lib/output');
const service = require('../lib/service');
const moment = require('moment');
const vinlirc = require('../lib/vinlirc');

const telemetryService = service('telemetry');

const oneLineData = function(data) {
  const keys = _.sortBy(Object.keys(_.omit(data, [ 'location', 'accel' ])));
  const tr = _.zipObject(keys, _.map(keys, (key) => {
    return data[key];
  }));
  return JSON.stringify(tr);
};

program
  .description('Get recent messages for a device')
  .option('--app [app id]')
  .option('--secret [app secret]')
  .option('--device [device id]')
  .option('--limit [number]')
  .option('--since [date or string]')
  .option('--until [date]')
  .option('-o, --output [number]')
  .parse(process.argv);

B.resolve(vinlirc.read(program))
  .then(assertAppSecret)
  .then((options) =>
    yarp({
      url: `${telemetryService}/api/v1/devices/${options.device}/messages`,
      qs: {
        limit: _.get(program, 'limit', 10),
        since: dateUtils.convertSince(program),
        until: dateUtils.convertUntil(program)
      },
      auth: {
        user: options.app,
        pass: options.secret
      }
    })
  )
  .then((resp) => {
    const headers = [{
      title: 'Timestamp',
      key: 'timestamp',
      format: (date) => moment(date).format('YYYY-MM-DD HH:mm:ss ZZ')
    }, {
      title: 'Lon',
      key: 'data.location.coordinates[0]'
    }, {
      title: 'Lat',
      key: 'data.location.coordinates[1]'
    }, {
      title: 'Data',
      key: 'data',
      width: 90,
      wrapWord: true,
      format: oneLineData
    }];

    Output.printList(program.output, resp, 'messages', headers);
  })
  .catch(require('../lib/error_handler'))
  .done();
